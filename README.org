#+TITLE: Coat of Arms Generator

TL;DR: https://coat-of-arms.org and [[./features.org][features]]

** About
I've started to learn about heraldry. There are many resources online, but I
didn't find a lot of software to create coats of arms. And the software I found
felt limited and hard to use.

** Alternatives
The best editor I found was on [[https://drawshield.net/][DrawShield]], which also is an amazing resource on
heraldry in general. It was the starting point for a lot of reading.
In particular it has a blazonry parser and SVG renderer, which is very
impressive. But it is server-side, making working with it rather slow and as a
beginner I found it difficult to understand the various parts of it.

I wanted to write a responsive client-side interface that immediately shows the
changes.

** Goals
- Implement a system to create and render data that describes coats of
  arms and ultimately entire heraldic achievements.
- Convert between blazonry and that data in both directions.
- Create precise, canonical results (if possible) that mainly use the
  description of the coat of arms and heraldic rules, i.e. it is not an SVG
  editor with a library of elements to arrange manually.
- In cases where interpretation or manual tweaking is necessary, include
  rendering hints, but those are strictly separate from any data that is covered
  by blazonry.
- Validate coat of arms data against heraldic rules and potentially rule sets,
  e.g. specific to a period in time or region.

** Potential future goals
- An open database of historical coats of arms with their metadata and their
  rendering.

** Design decisions
*** Language
Clojure(Script) is awesome and sparks joy.

*** Intermediate data format
It's no attempt to re-invent [[https://en.wikipedia.org/wiki/Blazon][Blazonry]], but the renderer will need some data
representation of the coat of arms, and this data needs to be more precise than
blazonry. It also should not care about heraldic rules, because it needs to be
more powerful than those in order to deal with all the possible exceptions and
historical/regional differences.

Conversion between this data representation and blazonry in both directions is
still the goal.

This data structure also is not intended for human consumption or manipulation,
it is only the source of truth behind the curtains. And the editor is the tool
to wrap around it.

I think [[https://github.com/edn-format/edn][EDN]] is perfect for this and will result in well-structured and concise
representations.

** Licensing/attribution
I'm still working on this, so if you see any work that isn't properly
attributed, then please let me know!

For now my plan is to keep the original files (so far only Wikimedia Commons) in
~assets/charges/orginals~, albeit with changed filenames and in a directory
structure. They get optimized and converted to EDN, which drops their metadata.
I'll look into including this metadata whenever I implement an SVG export, but
for the web interface this is more efficient and I believe the link to the
originals should be sufficient as attribution and indication of the changes made.

See the [[./LICENSE][LICENSE]] file for this repository's own licensing info.
